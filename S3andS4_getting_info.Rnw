%%%  From S3,S4_class_method_inquiry.tex, which we can now delete.
%%%  TexShop is far faster than RStudio for this.
%%%  I just followed directions from http://stackoverflow.com/questions/4922432/more-efficient-r-sweave-texshop-work-flow
%%%  to add Sweave capability to TexShop- but careful, a *.tex file will be overwritten.
%%%  SweaveOpts(concordance=TRUE)  used by Sweave;  breaks LaTex if not Sweaved first.

\documentclass[12pt,english]{article}

%% LyX 2.0.6 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
% \documentclass[12pt,english]{article}
\usepackage[T1]{fontenc}
\usepackage[latin9]{inputenc}
\pagestyle{empty}
\setlength{\parskip}{\medskipamount}
\setlength{\parindent}{0pt}
\usepackage{array}
\usepackage{pifont}
\usepackage{amssymb}
\usepackage{url}  % Formatting web addresses  


\makeatletter
% Preview source code
%      SweaveOpts{concordance=TRUE}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
%% Because html converters don't know tabularnewline
\providecommand{\tabularnewline}{\\}

\AtBeginDocument{
  \def\labelitemii{\(\blacklozenge\)}
  \def\labelitemiii{\ding{227}}
  \def\labelitemiv{\ding{70}}
}

\makeatother

\usepackage{textcomp}  
\def\Q{\textquotesingle}

\usepackage{babel}

\usepackage[margin=0.5in]{geometry}

\begin{document}
%\SweaveOpts{concordance=TRUE}


%\hfill{}%

\section{Finding classes and class names}

<<>>=
setClass('TempClass', representation(x='numeric')) ## doesn't work just with contains='numeric'getClass('TempClass')
tempObj = new('TempClass')
getClass(tempObj)
### Does NOT return the class itself:
identical(getClass('TempClass'), getClass(tempObj))
#### And this doesn't help:
getClass(getClass(tempObj))
#### This is how you do it:
class(tempObj)
getClass(class(tempObj))
### Can you say, 'arcane'?
@

Note that getClass returns 
\section{Finding methods}


\subsection{Finding method names}
%\begin{tabular}{|c|c|c|}   %%% OK, but does not respect linebreak
%\begin{tabular}{|m|m|m}
\begin{tabular}{|>{\centering}m{1.5cm}|>{\centering}m{6.5cm}|>{\centering}m{9.5cm}|}
\hline 
 & S3 & S4\tabularnewline
\hline 
Name & methods & showMethods\tabularnewline
\hline 
Location & utils & methods\tabularnewline
\hline 
Signature & methods(generic.function, class) &
%%\multirow{1}{*}
showMethods(f = character(), \linebreak
where = topenv(parent.frame()), classes
= NULL\linebreak  ,includeDefs = FALSE, inherited = !includeDefs,
showEmpty,\linebreak  printTo = stdout(), fdef)
\tabularnewline
\hline 
 & List all available methods for an S3 generic function,\linebreak or all methods
for a class 
& Show a summary of the methods for one or more generic functions, possibly restricted to those involving specified classes.
\tabularnewline
\hline 
Example & & \\ 
\tabularnewline
\hline 
\end{tabular}


Try also 
<<>>=
library('CTDesignExplorer')
showMethods("sim1CT")
findMethods("sim1CT")
findMethodSignatures(methods=findMethods("sim1CT"))
@


\subsection{Finding constructor bodies}

``Constructors'' are actually methods. 

From \url{https://stat.ethz.ch/pipermail/r-devel/2008-May/049422.html}
\\
but many errors.  See instead
\url{http://www.bioconductor.org/help/course-materials/2011/AdvancedRFeb2011Seattle/S4Overview-slides.pdf}

Note that the documentation says to use ``slots'' and ``contains''
instead of ``representation'', but Herve's document uses ``representation''.

\begin{verbatim}
#Oleg Sklyar's points:\\
#1) validity should return a character in case of errors

# This works:
getClass("A")@validity
\\or this\\
getValidity(getClass("A"))


#2) default initializer usually does the job
#3) define constructors as methods to allow different signatures and 
#   conversions from other classes
#4) If you derive your class from numeric, rather than add slots,
#   the performance will be much better and you will get default
#   behaviour of numeric, i.e.
#setClass("A",
#  representation("numeric", b="numeric")

setClass("A",
  representation(a="numeric",b="numeric"),
  validity = function(me) {
    print('In validity')
    if (length(me@a)!=length(me@b))
      return("different lengths of a and b")
    if (length(me@a)==0) 
      return("object length is zero")
    TRUE
  }
)
#### Now, define the constructors:
setGeneric("A", function(a,b,...) standardGeneric("A"))
setMethod("A", signature(a="missing",b="missing"),
  function(a,b,...) A(as.numeric(1:10),...) ## calls the one below
)
#setMethod("A", signature(a="A",b="missing"),
#  function(a,b,...) a)
setMethod("A", signature(a="ANY",b="ANY"),
  function(a,b,...) new("A",a=as.numeric(a),b=as.numeric(b),...)
)
setMethod("A", signature(a="ANY",b="missing"),
  function(a,b,...) A(as.numeric(a),as.numeric(a),...) ## Calls the one above
)
\end{verbatim}


\subsection{Finding method bodies}

\begin{tabular}{|>{\centering}m{1.5cm}|>{\centering}m{6.5cm}|>{\centering}m{9.5cm}|}
\hline 
 & S3 & S4\tabularnewline
\hline 
Example & print.lm & theMethod = getMethod(\Q sim1CT\Q, signature=signature(designSpec=\Q DesignSpecifier\Q, popModelSpec=\Q OptionalPopModelSpecifier\Q, outcomeModelSpec=\Q OutcomeModelSpecifier\Q))\\ 
\tabularnewline
\hline 
\end{tabular}

str(theMethod())
\\
\begin{verbatim}
Formal class 'MethodDefinition' [package "methods"] with 4 slots
  ..@ .Data  :function (designSpec, popModelSpec, outcomeModelSpec)  
  ..@ target :Formal class 'signature' [package "methods"] with 3 slots
  .. .. ..@ .Data  : chr [1:3] "DesignSpecifier" "OptionalPopModelSpecifier" "OutcomeModelSpecifier"
  .. .. ..@ names  : chr [1:3] "designSpec" "popModelSpec" "outcomeModelSpec"
  .. .. ..@ package: chr [1:3] ".GlobalEnv" ".GlobalEnv" ".GlobalEnv"
  ..@ defined:Formal class 'signature' [package "methods"] with 3 slots
  .. .. ..@ .Data  : chr [1:3] "DesignSpecifier" "OptionalPopModelSpecifier" "OutcomeModelSpecifier"
  .. .. ..@ names  : chr [1:3] "designSpec" "popModelSpec" "outcomeModelSpec"
  .. .. ..@ package: chr [1:3] ".GlobalEnv" ".GlobalEnv" ".GlobalEnv"
  ..@ generic: atomic [1:1] sim1CT
  .. ..- attr(*, "package")= chr ".GlobalEnv"
\end{verbatim}

\begin{tabular}{|>{\centering}m{1.5cm}|>{\centering}m{6.5cm}|}
\hline 
function body & theMethod@.Data\tabularnewline
\hline 
signature & theMethod@defined\tabularnewline
\hline 
\end{tabular}

\section{Finding slots}

\subsection{Finding slot names for a class}

\begin{tabular}{|>{\centering}m{1.5cm}|>{\centering}m{6.5cm}|}
\hline 
 & S4\tabularnewline
\hline 
Name  & getSlots\tabularnewline
\hline 
Location & methods\tabularnewline
\hline
Example & getSlots(\Q CRMSpecifier\Q)\\
\tabularnewline
\hline 

\end{tabular}

\subsection{Finding slot values for an object}

\begin{tabular}{|>{\centering}m{1.5cm}|>{\centering}m{10.5cm}|}
\hline 
 & S4\tabularnewline
\hline 
Example &
slot(object=crm9, name=\Q InitialProbGuesses\Q )
\\
crm9@TierDoses\tabularnewline
\hline 
\end{tabular}

\section{Defunct}

getAllMethods\\
getMethods (but not getMethod!)\\


\end{document}