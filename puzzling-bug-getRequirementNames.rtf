{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \
I solved this problem by adding a "as.vactor" wrapper in the function\
getRequirementNames\
But why that's SOMETIMES necessary is a puzzle!!!\
\
As follows:\
\
Browse[1]> requirementList\
               vg_SampleSizeMaxIsReached \
                         "SampleSizeMax" \
vg_notStopping.vg_SampleSizeMaxIsReached \
                "SampleSizeMaxIsReached" \
\
So the question is, why does the 2nd entry have a dotted name?\
\
Browse[1]> getRequirementNames(vgList[[1]])\
[1] "SampleSizeMax"\
Browse[1]> getRequirementNames(vgList[[2]])\
vg_SampleSizeMaxIsReached \
 "SampleSizeMaxIsReached" \
Browse[1]> names(vgList)\
[1] "vg_SampleSizeMaxIsReached" "vg_notStopping"      \
So it's not because anything odd in names(vgList)\
\
Next we see that there is no discernable difference between vgList[[1]] and vgList[[2]]\
\
Browse[1]> vgList[[1]]@requirements\
An object of class "VariableList"\
[[1]]\
An object of class "Variable"\
Slot "name":\
[1] "SampleSizeMax"\
\
Slot "description":\
[1] "Upper bound for sample size"\
\
Slot "checkDataType":\
function (x)  .Primitive("is.numeric")\
\
\
Browse[1]> vgList[[2]]@requirements\
An object of class "VariableList"\
[[1]]\
An object of class "Variable"\
Slot "name":\
[1] "SampleSizeMaxIsReached"\
\
Slot "description":\
[1] "Upper bound for sample size has been reached."\
\
Slot "checkDataType":\
function (x)  .Primitive("is.logical")\
\
\
Browse[1]> getRequirementNames\
function(vg)\{ \
  if(is.null(vg@requirements)) return(NULL)\
  if(is(vg@requirements, "Variable"))\
    return(list(vg@requirements))\
  sapply(vg@requirements, slot, name="name")\
\}\
<environment: namespace:CTDesignExperimenter>\
\
\
\
Browse[1]> sapply(vgList[[1]]@requirements, slot, name="name")\
[1] "SampleSizeMax"\
Browse[1]> sapply(vgList[[2]]@requirements, slot, name="name")\
vg_SampleSizeMaxIsReached \
 "SampleSizeMaxIsReached" \
Browse[1]> names(vgList)\
[1] "vg_SampleSizeMaxIsReached" "vg_notStopping"           \
Browse[1]> str(vgList[[2]]@requirements)\
Formal class 'VariableList' [package "CTDesignExperimenter"] with 1 slots\
  ..@ .Data:List of 1\
  .. ..$ :Formal class 'Variable' [package "CTDesignExperimenter"] with 3 slots\
  .. .. .. ..@ name         : chr "SampleSizeMaxIsReached"\
  .. .. .. ..@ description  : chr "Upper bound for sample size has been reached."\
  .. .. .. ..@ checkDataType:function (x)  \
Browse[1]> temp = vgList[[2]]@requirements\
Browse[1]> temp@name\
Error during wrapup: no slot of name "name" for this object of class "VariableList"\
Browse[1]> temp[[1]]@name\
[1] "SampleSizeMaxIsReached"\
Browse[1]> sapply(temp@requirements, slot, name="name")\
Error during wrapup: no slot of name "requirements" for this object of class "VariableList"\
Browse[1]> temp = vgList[[2]]\
Browse[1]> temp\
An object of class "VariableGenerator"\
Slot "insertSubType":\
[1] "StoppingCriterion"\
\
Slot "outputVariable":\
An object of class "Variable"\
Slot "name":\
[1] "continueAccrual"\
\
Slot "description":\
[1] "whether study is NOT stopping"\
\
Slot "checkDataType":\
function (x)  .Primitive("is.logical")\
\
\
Slot "generatorCode":\
function () \
\{\
    criteriaValues = c(SampleSizeMaxIsReached)\
    names(criteriaValues) = c("SampleSizeMaxIsReached")\
    print(criteriaValues)\
    whichTriggered = which(criteriaValues == TRUE)\
    cat("whichTriggered: ", whichTriggered, "\\n")\
    stopping = any(whichTriggered)\
    continueAccrual = !stopping\
    cat(" Stopping rules(s): ", names(criteriaValues[whichTriggered]), \
        "\\n")\
    return(continueAccrual)\
\}\
<environment: 0x7f99cb234668>\
\
Slot "parameters":\
$iAmAParameter\
[1] TRUE\
\
\
Slot "requirements":\
An object of class "VariableList"\
[[1]]\
An object of class "Variable"\
Slot "name":\
[1] "SampleSizeMaxIsReached"\
\
Slot "description":\
[1] "Upper bound for sample size has been reached."\
\
Slot "checkDataType":\
function (x)  .Primitive("is.logical")\
\
\
\
Slot "provisions":\
An object of class "Variable"\
Slot "name":\
[1] "continueAccrual"\
\
Slot "description":\
[1] "whether study is NOT stopping"\
\
Slot "checkDataType":\
function (x)  .Primitive("is.logical")\
\
\
Browse[1]> \
\
Enter a frame number, or 0 to exit   \
\
 1: runTrial()\
 2: Scaffolding.R#597: executeQueue()\
 3: Scaffolding.R#209: doAction(actionQueue$actions[[actionQu\
 4: Scaffolding.R#168: doAction(actionQueue$actions[[actionQu\
 5: Scaffolding.R#307: doThisAction(event, scenario)\
 6: Scaffolding.R#328: do.call(paste0("doThisAction_", event@\
 7: doThisAction_CheckStoppingRules(scenario = list(vg_liver \
 8: Scaffolding.R#569: VariableNetwork(vgList = VariableGener\
 9: VariableNetwork.R#124: uniqueRequirementNames %in% requir\
10: match(x, table, nomatch = 0)\
\
Selection: 8\
Called from: top level \
Browse[1]> temp = vgList[[2]]\
Browse[1]> getRequirementNames(temp)\
vg_SampleSizeMaxIsReached \
 "SampleSizeMaxIsReached" \
Browse[1]> asvector(getRequirementNames(temp))\
Error during wrapup: could not find function "asvector"\
Browse[1]> as.vector(getRequirementNames(temp))\
[1] "SampleSizeMaxIsReached"}